ifeq ($(shell uname -s),Darwin)
	CC = x86_64-elf-gcc
else
	CC = gcc
endif

ROOT_DIR = ../..
BIN_DIR  = ../bin
TARGET   = $(BIN_DIR)/$(BIN_NAME)

LOCAL_BUILD_DIR = ../local-build
LOCAL_BUILD_TARGET = $(LOCAL_BUILD_DIR)/$(BIN_NAME)

PLATFORM = $(shell echo __$(OS_NAME)__ | tr '[:upper:]' '[:lower:]')

# Add `-no-pie` to disable the PIE feature that causes `gcc` to not create an
# executable if needed, see: https://access.redhat.com/blogs/766093/posts/1975793
CFLAGS = -Wl,-emain -Wall -pedantic -std=c11 -O0 -ffreestanding -nostdlib -fno-builtin \
				 -D$(PLATFORM) \
				 -I $(ROOT_DIR)/src/include/ -I $(ROOT_DIR)/libs/ \
				 -no-pie -fno-pie
LIBS   = $(ROOT_DIR)/build/libc-$(OS_NAME).a

default: $(TARGET)

$(TARGET): *.c
	mkdir -p $(BIN_DIR)
	$(CC) -o $@ $^ $(CFLAGS) $(LIBS)

local: CC=gcc
local: CFLAGS=-Wall -pedantic -std=c11 -O0
local: *.c
	mkdir -p $(LOCAL_BUILD_DIR)
	$(CC) -o $(LOCAL_BUILD_TARGET) $^ $(CFLAGS)
.PHONY: local

clean:
	rm -f $(TARGET) $(LOCAL_BUILD_TARGET)
.PHONY: clean
