# The path is relative to the different userland folders.
include ../../Makefile.include

ARCH         ?= x86_64
ROOT_DIR     = ../..
BIN_DIR      = ../bin
BUILD_DIR    := $(ROOT_DIR)/build/$(ARCH)/userland-objects/userland/$(BIN_NAME)
TARGET       := $(BIN_DIR)/$(BIN_NAME)
PLATFORM     := $(shell echo __$(OS_NAME)__ | tr '[:upper:]' '[:lower:]')
EXTERNAL_DIR := $(ROOT_DIR)/external

LOCAL_BUILD_DIR = ../local-build
LOCAL_BUILD_TARGET := $(LOCAL_BUILD_DIR)/$(BIN_NAME)

# The list of external dependencies.
EXTERNAL_DEPS ?=
# The list of external objects to build.
EXTERNAL_OBJS ?=

ifdef OS_NAME
	EXTERNAL_OBJS += printf/printf.o
	EXTERNAL_DEPS += printf
endif

OBJS := $(patsubst %.c, $(BUILD_DIR)/%.o, $(shell find . -name '*.c'))
OBJS += $(addprefix $(BUILD_DIR)/$(EXTERNAL_DIR)/,$(EXTERNAL_OBJS))

WERRORS += -Wall -Wextra -Werror
WERRORS += -Werror=implicit-function-declaration
WERRORS += -Werror=int-conversion
WERRORS += -Werror=incompatible-pointer-types
WERRORS += -Werror=shift-count-overflow
WERRORS += -Werror=switch

COMMON_CFLAGS += $(WERRORS)
COMMON_CFLAGS += -O2 -std=c11
COMMON_CFLAGS += $(addprefix -I$(EXTERNAL_DIR)/,$(EXTERNAL_DEPS))

CFLAGS += $(COMMON_CFLAGS)
CFLAGS += --target=x86_64 -fstack-protector-strong
CFLAGS += -ffreestanding -nostdinc -nostdlib -fno-builtin
CFLAGS += -mno-mmx -mno-sse -mno-sse2 -mno-avx -mno-avx2
# Add `-no-pie` to disable the PIE feature that causes `gcc` to not create an
# executable if needed, see: https://access.redhat.com/blogs/766093/posts/1975793
CFLAGS += -fno-pie
CFLAGS += -D$(PLATFORM)
CFLAGS += -I $(ROOT_DIR)/include/

ifeq ($(ENABLE_USERLAND_DEBUG), 1)
	CFLAGS += -DENABLE_USERLAND_DEBUG
endif

LDFLAGS += --image-base=0x40000000
LDFLAGS += -nostdlib -no-pie
LDFLAGS += $(ROOT_DIR)/build/$(ARCH)/dist/libc-$(OS_NAME)-$(ARCH).a

default: $(TARGET)

$(TARGET): $(OBJS)
	$(PROGRESS) "LD" $@
	mkdir -p $(BIN_DIR)
	$(LD) -o $@ $^ $(LDFLAGS)

$(OBJS): $(BUILD_DIR)/%.o : %.c
	$(PROGRESS) "CC" $<
	mkdir -p $(dir $@)
	$(CC) $(CFLAGS) -c $< -o $@

local: CFLAGS  = $(COMMON_CFLAGS)
local: LDFLAGS = -fuse-ld=lld
local: $(OBJS)
	$(PROGRESS) "LD" $(LOCAL_BUILD_TARGET)
	mkdir -p $(LOCAL_BUILD_DIR)
	$(CC) $(LDFLAGS) -o $(LOCAL_BUILD_TARGET) $^
.PHONY: local

clean:
	$(PROGRESS) "CLEAN"
	rm -f $(TARGET) $(LOCAL_BUILD_TARGET) $(OBJS)
.PHONY: clean
