ifeq ($(shell uname -s),Darwin)
	CC = x86_64-elf-gcc
else
	CC = gcc
endif

ARCH         ?= x86_64
ROOT_DIR     = ../..
BIN_DIR      = ../bin
BUILD_DIR    := $(ROOT_DIR)/build/$(ARCH)/userland-objects/userland/$(BIN_NAME)
TARGET       := $(BIN_DIR)/$(BIN_NAME)
PLATFORM     := $(shell echo __$(OS_NAME)__ | tr '[:upper:]' '[:lower:]')
EXTERNAL_DIR := $(ROOT_DIR)/external

LOCAL_BUILD_DIR = ../local-build
LOCAL_BUILD_TARGET := $(LOCAL_BUILD_DIR)/$(BIN_NAME)

# The list of external dependencies.
EXTERNAL_DEPS ?=
# The list of external objects to build.
EXTERNAL_OBJS ?=

ifdef OS_NAME
	EXTERNAL_OBJS += printf/printf.o
	EXTERNAL_DEPS += printf
endif

OBJS := $(patsubst %.c, $(BUILD_DIR)/%.o, $(shell find . -name '*.c'))
OBJS += $(addprefix $(BUILD_DIR)/$(EXTERNAL_DIR)/,$(EXTERNAL_OBJS))

# Add `-no-pie` to disable the PIE feature that causes `gcc` to not create an
# executable if needed, see: https://access.redhat.com/blogs/766093/posts/1975793
COMMON_CFLAGS = -Wall -pedantic -std=c11 -O2 \
								$(addprefix -I$(EXTERNAL_DIR)/,$(EXTERNAL_DEPS))
CFLAGS = $(COMMON_CFLAGS) -ffreestanding -fno-builtin -fno-pie \
				 -D$(PLATFORM) \
				 -I $(ROOT_DIR)/include/

ifeq ($(ENABLE_USERLAND_DEBUG), 1)
	CFLAGS += -DENABLE_USERLAND_DEBUG
endif

LDFLAGS ?=
LDFLAGS += -Wl,-Ttext-segment=40000000 \
					 -nostdlib -no-pie \
					 $(ROOT_DIR)/build/$(ARCH)/dist/libc-$(OS_NAME)-$(ARCH).a

default: $(TARGET)

$(TARGET): $(OBJS)
	mkdir -p $(BIN_DIR)
	$(CC) -o $@ $^ $(LDFLAGS)

$(OBJS): $(BUILD_DIR)/%.o : %.c
	mkdir -p $(dir $@)
	$(CC) $(CFLAGS) -c $< -o $@

local: CC      = gcc
local: CFLAGS  = $(COMMON_CFLAGS)
local: LDFLAGS =
local: $(OBJS)
	mkdir -p $(LOCAL_BUILD_DIR)
	$(CC) -o $(LOCAL_BUILD_TARGET) $^ $(LDFLAGS)
.PHONY: local

clean:
	rm -f $(TARGET) $(LOCAL_BUILD_TARGET) $(OBJS)
.PHONY: clean
