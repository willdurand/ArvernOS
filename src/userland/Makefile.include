# By default, we tell `make` to remain silent. We can enable a more verbose
# output by passing `VERBOSE=1` to `make`.
VERBOSE ?= 0
ifeq ($(VERBOSE), 0)
.SILENT:
endif

MAKEFLAGS += --warn-undefined-variables

.DEFAULT_GOAL := all

# Disable implicit rules.
.SUFFIXES:

###############################################################################
# Configuration
###############################################################################

# The path is relative to the different userland folders.
ARCH                  ?= x86_64
BOARD                 ?=
OS_NAME               ?=
ENABLE_USERLAND_DEBUG ?= 0
bin_name              ?=
platform              := $(shell echo __$(OS_NAME)__ | tr '[:upper:]' '[:lower:]')

root_dir     = ../../..
bin_dir      = ../bin
external_dir = $(root_dir)/external

ifeq ($(BOARD),)
	base_build_dir = $(root_dir)/build/$(ARCH)
else
	base_build_dir = $(root_dir)/build/$(ARCH)/$(BOARD)
endif

build_dir    = $(base_build_dir)/userland-objects/src/userland/$(bin_name)
target       = $(bin_dir)/$(bin_name)

local_build_dir    = ../local-build
local_build_target = $(local_build_dir)/$(bin_name)

# The list of external dependencies.
external_deps ?=
# The list of external objects to build.
external_objs ?=

###############################################################################
# Tools
###############################################################################

CC       = $(LLVM_PREFIX)clang$(LLVM_SUFFIX)
LD       = $(LLVM_PREFIX)ld.lld$(LLVM_SUFFIX)
AR       = $(LLVM_PREFIX)llvm-ar$(LLVM_SUFFIX)
NM       = $(LLVM_PREFIX)llvm-nm$(LLVM_SUFFIX)
OBJCOPY  = $(LLVM_PREFIX)llvm-objcopy$(LLVM_SUFFIX)
ARM_GCC  = arm-none-eabi-gcc
# This is from: https://github.com/nuta and it allows to print nice progress
# messages.
progress := printf "  \\033[1;96m%8s\\033[0m  \\033[1;m%s\\033[0m\\n"

###############################################################################
# Options for the different tools
###############################################################################

###############################################################################
# Source files
###############################################################################

objs += $(patsubst %.c, $(build_dir)/%.o, $(shell find . -name '*.c'))
objs += $(addprefix $(build_dir)/$(external_dir)/, $(external_objs))

###############################################################################
# Custom configuration
###############################################################################

-include $(root_dir)/config

UBSAN       ?=
LLVM_PREFIX ?=
LLVM_SUFFIX ?=

ifeq ($(UBSAN), 1)
	CFLAGS += -fsanitize=undefined
endif

# This file exists in a Docker container because we copy it in `Dockerfile`.
in_docker = $(wildcard /tmp/install-linux-deps)
ifneq ($(in_docker),)
	LLVM_PREFIX =
	LLVM_SUFFIX = -13
endif

###############################################################################
# Flags
###############################################################################

LD_FLAGS += -nostdlib

ifeq ($(ARCH), aarch32)
	# We need -march to avoid the following error: "lld uses blx instruction, no
	# object with architecture supporting feature detected".
	CFLAGS   += --target=arm-none-eabi -march=armv5te
	LD_FLAGS += $(shell $(ARM_GCC) -print-libgcc-file-name)
endif

ifeq ($(ARCH), aarch64)
	CFLAGS += --target=aarch64-elf
endif

ifeq ($(ARCH), x86_64)
	CFLAGS += --target=x86_64 -fstack-protector-strong
	CFLAGS += -mno-mmx -mno-sse -mno-sse2 -mno-avx -mno-avx2
	# Add `-no-pie` to disable the PIE feature that causes `gcc` to not create an
	# executable if needed, see:
	# https://access.redhat.com/blogs/766093/posts/1975793
	CFLAGS += -fno-pie

	LD_FLAGS += --image-base=0x40000000
	LD_FLAGS += -no-pie
endif

WERRORS += -Wall -Wextra -Werror
WERRORS += -Werror=implicit-function-declaration
WERRORS += -Werror=int-conversion
WERRORS += -Werror=incompatible-pointer-types
WERRORS += -Werror=shift-count-overflow
WERRORS += -Werror=switch

COMMON_CFLAGS += -O2 -std=c11
COMMON_CFLAGS += $(WERRORS)
COMMON_CFLAGS += $(addprefix -I$(external_dir)/, $(external_deps))

CFLAGS += -ffreestanding -nostdlib -fno-builtin
CFLAGS += $(COMMON_CFLAGS)
CFLAGS += -I$(root_dir)/include/libc/ -I$(external_dir)/printf/
CFLAGS += -D$(platform)

ifeq ($(ENABLE_USERLAND_DEBUG), 1)
	CFLAGS += -DENABLE_USERLAND_DEBUG
endif

LD_FLAGS += $(base_build_dir)/dist/libc-$(OS_NAME)-$(ARCH).a

###############################################################################
# Rules and targets
###############################################################################

all: $(target)
.PHONY: all

$(target): $(objs)
	$(progress) "LD" $@
	mkdir -p $(bin_dir)
	$(LD) -o $@ $^ $(LD_FLAGS)

$(objs): $(build_dir)/%.o : %.c
	$(progress) "CC" $<
	mkdir -p $(dir $@)
	$(CC) $(CFLAGS) -c $< -o $@

local: CFLAGS  = $(COMMON_CFLAGS)
local: LD_FLAGS = -fuse-ld=lld
local: $(objs)
	$(progress) "LD" $(local_build_target)
	mkdir -p $(local_build_dir)
	$(CC) $(LD_FLAGS) -o $(local_build_target) $^
.PHONY: local

clean:
	$(progress) "CLEAN"
	rm -f $(target) $(local_build_target) $(objs)
.PHONY: clean
