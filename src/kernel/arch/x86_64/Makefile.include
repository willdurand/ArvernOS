LD_TARGET = elf_x86_64

ISO                    = $(DIST_DIR)/$(OS_NAME)-$(ARCH).iso
# This should be a bitmap font.
KERNEL_CONSOLE_FONT_GZ = $(EXTERNAL_DIR)/scalable-font2/fonts/u_vga16.sfn.gz
KERNEL_CONSOLE_FONT    = $(MISC_DIR)/font.o
# GRUB stuff.
ISO_DIR                = $(MISC_DIR)/isofiles
ISO_BOOT_DIR           = $(ISO_DIR)/boot
GRUB_DIR               = $(ISO_BOOT_DIR)/grub
GRUB_CFG               = $(GRUB_DIR)/grub.cfg

# This is used in `src/kernel/arch/x86_64/asm/multiboot_header.asm`.
VBE_WIDTH  = 1024
VBE_HEIGHT = 768
VBE_BPP    = 32

NASM = nasm
NASM_OPTIONS = -dVBE_WIDTH=$(VBE_WIDTH) -dVBE_HEIGHT=$(VBE_HEIGHT) -dVBE_BPP=$(VBE_BPP)

# We need to have -fno-omit-frame-pointer or the kernel stack backtrace won't
# get the stack.
CFLAGS += --target=x86_64 -fno-omit-frame-pointer -fstack-protector-strong
CFLAGS += -mno-red-zone -mno-mmx -mno-sse -mno-sse2 -mno-avx -mno-avx2

QEMU = qemu-system-x86_64

QEMU_OPTIONS += -m 512M
QEMU_OPTIONS += -serial file:$(LOG_FILE)
QEMU_OPTIONS += -netdev user,id=u1,ipv6=off,dhcpstart=10.0.2.20
QEMU_OPTIONS += -device rtl8139,netdev=u1
QEMU_OPTIONS += -object filter-dump,id=f1,netdev=u1,file=$(LOG_DIR)/traffic-$(BUILD_MODE).pcap

ifeq ($(ENABLE_FRAMEBUFFER), 1)
	CFLAGS += -DENABLE_FRAMEBUFFER
	NASM_OPTIONS += -dENABLE_FRAMEBUFFER
endif

GRUB_DEFAULT ?= 0

# See: https://stackoverflow.com/questions/649246/is-it-possible-to-create-a-multi-line-string-variable-in-a-makefile/649462#649462
define GRUB_CFG_BODY
set timeout=1
set default=$(GRUB_DEFAULT)

menuentry "$(OS_NAME) $(BUILD_MODE)" {
	multiboot2 /boot/$(KERNEL_BIN) $(CMDLINE)
	module2 /boot/$(INITRD_TAR) initrd
	module2 /boot/$(SYMBOLS_TXT) symbols
	boot
}

menuentry "$(OS_NAME) $(BUILD_MODE) (kernel mode)" {
	multiboot2 /boot/$(KERNEL_BIN) $(KERNEL_CMDLINE)
	module2 /boot/$(INITRD_TAR) initrd
	module2 /boot/$(SYMBOLS_TXT) symbols
	boot
}
endef

export GRUB_CFG_BODY

$(ISO_DIR): $(ARCH_BUILD_DIR)
	mkdir -p $@

$(ISO_BOOT_DIR): $(ISO_DIR)
	mkdir -p $@


$(GRUB_DIR): $(ISO_BOOT_DIR)
	mkdir -p $@

# We mark this target as .PHONY to write the file every time.
$(GRUB_CFG): $(GRUB_DIR)
	echo "$$GRUB_CFG_BODY" > $@
.PHONY: $(GRUB_CFG)

$(LIBK_ASM_OBJECTS): $(LIBK_OBJS_DIR)/%.o: %.asm
	$(PROGRESS) "NASM" $<
	mkdir -p $(dir $@)
	$(NASM) $(NASM_OPTIONS) -f elf64 $< -o $@

$(LIBC_ASM_OBJECTS): $(LIBC_OBJS_DIR)/%.o: %.asm
	$(PROGRESS) "NASM" $<
	mkdir -p $(dir $@)
	$(NASM) $(NASM_OPTIONS) -f elf64 $< -o $@

arch-kernel: LINK_TO_KERNEL += $(KERNEL_CONSOLE_FONT)
arch-kernel: $(KERNEL_CONSOLE_FONT) $(KERNEL)
.PHONY: arch-kernel

$(ISO): arch-kernel $(INITRD) $(GRUB_CFG)
	$(PROGRESS) "GRUB" $@
	mkdir -p $(ISO_BOOT_DIR)
	cp $(KERNEL) $(ISO_BOOT_DIR)
	cp $(INITRD) $(ISO_BOOT_DIR)
	cp $(SYMBOLS) $(ISO_BOOT_DIR)
	$(TOOLS_DIR)/grub-mkrescue -o $@ $(ISO_DIR)

$(KERNEL_CONSOLE_FONT): $(MISC_DIR) $(KERNEL_CONSOLE_FONT_GZ)
	$(PROGRESS) "LD" $@
	cp $(KERNEL_CONSOLE_FONT_GZ) $(MISC_DIR)/console.sfn.gz
	gunzip -f $(MISC_DIR)/console.sfn.gz
	# We have to do this because we cannot control the symbol name generated by
	# `ld`. We get a pretty nice name by cd'ing into the build directory.
	cd $(MISC_DIR) && $(LD) -m $(LD_TARGET) -r -b binary -o ../../../$@ console.sfn

arch-debug: CFLAGS += $(DEBUG_CFLAGS)
arch-debug: BUILD_MODE = debug
arch-debug: GRUB_DEFAULT = 1
arch-debug: $(ISO)
.PHONY: arch-debug

arch-run-debug: BUILD_MODE = debug
arch-run-debug: QEMU_OPTIONS += -d guest_errors,unimp --no-reboot
arch-run-debug: debug
	$(PROGRESS) "RUN" $(ISO)
	$(QEMU) -cdrom $(ISO) $(QEMU_OPTIONS)
.PHONY: arch-run-debug

arch-release: $(ISO)
.PHONY: arch-release

arch-run-release: release
	$(PROGRESS) "RUN" $(ISO)
	$(QEMU) -cdrom $(ISO) $(QEMU_OPTIONS)
.PHONY: arch-run-release

arch-run-test: BUILD_MODE = test
arch-run-test: QEMU_OPTIONS += -curses
arch-run-test: CMDLINE = /bin/userland-testsuite
arch-run-test: run-release
.PHONY: arch-run-test

arch-test: CFLAGS_WITHOUT_TARGET := $(filter-out --target=x86_64,$(CFLAGS))
arch-test: CFLAGS = $(CFLAGS_WITHOUT_TARGET)
arch-test: CFLAGS += -fPIC -g3 -fsanitize=undefined -fsanitize=address
arch-test: CFLAGS_FOR_TESTS += -g3 -fsanitize=undefined -fsanitize=address
arch-test: CFLAGS_FOR_TESTS += -DENABLE_LOGS_FOR_TESTS -DTEST_ENV
arch-test: CFLAGS_FOR_TESTS += -I$(TESTS_DIR)/ -I$(INCLUDE_DIR)/kernel/ -I$(ARCH_SRC)/
arch-test: libc
	# libc
	mkdir -p $(ARCH_BUILD_DIR)/libc/string
	for file in $(LIBC_TEST_FILES); do \
		echo ; \
		$(CC) -shared $(LIBC_OBJS_DIR)/src/$$file.o -o $(ARCH_BUILD_DIR)/$$file.so ; \
		$(CC) -g3 -fsanitize=undefined -fsanitize=address -I$(TESTS_DIR)/ $(TESTS_DIR)/$$file.c -o $(ARCH_BUILD_DIR)/$$file ; \
		LD_PRELOAD=./$(ARCH_BUILD_DIR)/$$file.so ./$(ARCH_BUILD_DIR)/$$file || exit 1 ; \
	done
	# fs/vfs
	$(CC) $(CFLAGS_FOR_TESTS) -I$(TESTS_DIR)/proxies/ -o $(ARCH_BUILD_DIR)/vfs \
		$(KERNEL_TESTS_DIR)/fs/vfs.c $(KERNEL_SRC_DIR)/fs/vfs.c
	./$(ARCH_BUILD_DIR)/vfs
	# fs/tar
	$(CC) $(CFLAGS_FOR_TESTS) -I$(TESTS_DIR)/proxies/ -o $(ARCH_BUILD_DIR)/tar \
		$(KERNEL_TESTS_DIR)/fs/tar.c $(KERNEL_SRC_DIR)/fs/tar.c $(KERNEL_SRC_DIR)/fs/vfs.c
	./$(ARCH_BUILD_DIR)/tar
	# fs/proc
	$(CC) $(CFLAGS_FOR_TESTS) -I$(TESTS_DIR)/proxies/ -o $(ARCH_BUILD_DIR)/proc \
		$(KERNEL_TESTS_DIR)/fs/proc.c $(KERNEL_SRC_DIR)/fs/proc.c $(KERNEL_SRC_DIR)/fs/vfs.c
	./$(ARCH_BUILD_DIR)/proc
	# fs/sock
	$(CC) $(CFLAGS_FOR_TESTS) -I$(TESTS_DIR)/proxies/ -o $(ARCH_BUILD_DIR)/sock \
		$(KERNEL_TESTS_DIR)/fs/sock.c $(KERNEL_SRC_DIR)/fs/sock.c $(KERNEL_SRC_DIR)/fs/vfs.c
	./$(ARCH_BUILD_DIR)/sock
	# mmu/frame
	$(CC) $(CFLAGS_FOR_TESTS) -Wformat=0 -I$(TESTS_DIR)/proxies/ -o $(ARCH_BUILD_DIR)/frame \
		$(KERNEL_TESTS_DIR)/mmu/frame.c $(ARCH_SRC)/mmu/frame.c $(ARCH_SRC)/core/multiboot.c $(KERNEL_SRC_DIR)/mmu/bitmap.c
	./$(ARCH_BUILD_DIR)/frame
	# config/inish
	$(CC) $(CFLAGS_FOR_TESTS) -I$(TESTS_DIR)/proxies/ -o $(ARCH_BUILD_DIR)/inish \
		$(KERNEL_TESTS_DIR)/config/inish.c $(KERNEL_SRC_DIR)/config/inish.c
	./$(ARCH_BUILD_DIR)/inish
	# mmu/bitmap
	$(CC) $(CFLAGS_FOR_TESTS) -o $(ARCH_BUILD_DIR)/bitmap \
		$(KERNEL_TESTS_DIR)/mmu/bitmap.c $(KERNEL_SRC_DIR)/mmu/bitmap.c
	./$(ARCH_BUILD_DIR)/bitmap
	# mmu/paging
	$(CC) $(CFLAGS_FOR_TESTS) -Wformat=0 -I$(TESTS_DIR)/proxies/ -o $(ARCH_BUILD_DIR)/paging \
		$(KERNEL_TESTS_DIR)/mmu/paging.c $(ARCH_SRC)/mmu/paging.c $(ARCH_SRC)/core/multiboot.c $(ARCH_SRC)/mmu/frame.c $(KERNEL_SRC_DIR)/mmu/bitmap.c $(ARCH_SRC)/core/register.c
	./$(ARCH_BUILD_DIR)/paging
.PHONY: arch-test

arch-version:
	$(NASM) --version
.PHONY: arch-version
