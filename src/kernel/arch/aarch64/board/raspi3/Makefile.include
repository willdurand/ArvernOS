###############################################################################
# Configuration
###############################################################################

cmdline_txt = $(dist_dir)/cmdline.txt
initrd_o    = $(misc_dir)/initrd.o

###############################################################################
# Tools
###############################################################################

###############################################################################
# Options for the different tools
###############################################################################

QEMU_OPTIONS += -M raspi3 -append "$(shell cat $(cmdline_txt))" -serial null -serial stdio

###############################################################################
# Source files
###############################################################################

libk_c_files   += $(wildcard $(board_src)/*.c)
libk_c_files   += $(wildcard $(board_src)/arch/*.c)
libk_c_files   += $(wildcard $(board_src)/mmu/*.c)
libk_c_files   += $(wildcard $(board_src)/drivers/*.c)
libk_asm_files += $(wildcard $(board_src)/asm/*.asm)

###############################################################################
# Flags
###############################################################################

BOARD_CFLAGS     += -mcpu=cortex-a53+nosimd
KERNEL_CFLAGS    += $(BOARD_CFLAGS)
KERNEL_ASM_FLAGS += $(BOARD_CFLAGS)
# We include a C header file in `asm/boot.asm` so we need to tell the compiler
# that assembly files may contain C code to preprocess first.
KERNEL_ASM_FLAGS += -x assembler-with-cpp -I$(arch_src)

###############################################################################
# Arch-specific targets
###############################################################################

###############################################################################
# Board-specific targets
###############################################################################

$(cmdline_txt): $(dist_dir)
	$(progress) "TXT" $@
	echo $(CMDLINE) > $@

$(initrd_o): $(initrd)
	$(progress) "LD" $@
	# We have to do this because we cannot control the symbol name generated by
	# `ld`. We get a pretty nice name by cd'ing into the build directory.
	cd $(misc_dir) && $(LD) -m $(LD_TARGET) -r -b binary -o ../../../../$@ ./$(initrd_tar)

$(kernel_img): libk_extra_objects += $(initrd_o)
$(kernel_img): $(cmdline_txt) $(initrd_o) $(kernel)
	$(progress) "OBJCOPY" $@
	$(OBJCOPY) -O binary $(kernel) $@
